syntax = "proto2";

package lczero;

// Load metric that accumulates seconds of load time.
// Separate proto to support LoadMetricUpdaterProto functionality.
message LoadMetricProto {
  optional double load_seconds = 1 [default = 0.0];
  optional double total_seconds = 2 [default = 0.0];
}

// Statistics metric for integer values.
message StatisticsProtoInt64 {
  optional int64 min = 1 [default = 9223372036854775807];
  optional int64 max = 2 [default = -9223372036854775807];
  optional int64 sum = 3 [default = 0];
  optional int64 count = 4 [default = 0];
  optional int64 latest = 5 [default = 0];
}

// Statistics metric for double values.
message StatisticsProtoDouble {
  optional double min = 1 [default = 1.7976931348623157e+308];
  optional double max = 2 [default = -1.7976931348623157e+308];
  optional double sum = 3 [default = 0.0];
  optional int64 count = 4 [default = 0];
  optional double latest = 5 [default = 0.0];
}

// Metrics for queue performance monitoring.
message QueueMetricProto {
  optional string name = 1;
  optional uint64 put_count = 2 [default = 0];
  optional uint64 get_count = 3 [default = 0];
  optional uint64 drop_count = 4 [default = 0];
  optional StatisticsProtoInt64 queue_fullness = 5;
  optional uint64 queue_capacity = 6 [default = 0];
}

// Metrics for FilePathProvider performance monitoring.
// Replaces the old FilePathProviderMetrics struct.
message FilePathProviderMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
}

// Metrics for ChunkSourceLoader performance monitoring.
message ChunkSourceLoaderMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
  optional uint64 skipped_files_count = 3 [default = 0];
  optional string last_chunk_key = 4;
}

// Metrics for ShufflingChunkPool performance monitoring.
message ShufflingChunkPoolMetricsProto {
  optional LoadMetricProto indexing_load = 1;
  optional LoadMetricProto chunk_loading_load = 2;
  optional QueueMetricProto queue = 3;
  optional StatisticsProtoInt64 chunk_sources_count = 4;
  optional uint64 current_chunks = 5 [default = 0];
  optional uint64 pool_capacity = 6 [default = 0];
  optional int32 chunks_since_anchor = 7 [default = 0];
  optional string anchor = 8;
  optional StatisticsProtoInt64 dropped_chunks = 9;
}

// Metrics for ChunkRescorer performance monitoring.
message ChunkRescorerMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
}

// Metrics for ChunkUnpacker performance monitoring.
message ChunkUnpackerMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
}

// Metrics for ShufflingFrameSampler performance monitoring.
message ShufflingFrameSamplerMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
  optional uint64 reservoir_capacity = 3 [default = 0];
  optional uint64 current_reservoir_size = 4 [default = 0];
}

// Metrics for TensorGenerator performance monitoring.
message TensorGeneratorMetricsProto {
  optional LoadMetricProto load = 1;
  optional QueueMetricProto queue = 2;
}

// Top-level metrics for the DataLoader.
// Replaces the old MetricGroup<FilePathProviderMetrics>.
message StageMetricProto {
  optional string name = 1;
  optional FilePathProviderMetricsProto file_path_provider = 2;
  optional ChunkSourceLoaderMetricsProto chunk_source_loader = 3;
  optional ShufflingChunkPoolMetricsProto shuffling_chunk_pool = 4;
  optional ChunkUnpackerMetricsProto chunk_unpacker = 5;
  optional ShufflingFrameSamplerMetricsProto shuffling_frame_sampler = 6;
  optional TensorGeneratorMetricsProto tensor_generator = 7;
  optional ChunkRescorerMetricsProto chunk_rescorer = 8;
  repeated QueueMetricProto output_queue_metrics = 10;
}

message DataLoaderMetricsProto {
  repeated StageMetricProto stage_metrics = 1;
}
